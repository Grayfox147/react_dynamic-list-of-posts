{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","components/CommentCard.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","currentPostsList","setSelectedPostId","selectedPostId","className","map","post","id","title","type","classNames","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","CommentCard","comment","onDeleteComment","href","email","name","Loader","NewCommentForm","addComment","selectedPost","comments","useState","setName","setEmail","setBody","nameError","setNameError","emailError","setEmailError","bodyError","setBodyError","htmlFor","placeholder","value","onChange","event","target","preventDefault","newComment","postId","Math","max","element","handleAdd","PostDetails","setComments","commentsAreLoading","setCommentsAreLoading","loadingCommsError","setLoadingCommsError","isWriting","setIsWriting","useEffect","length","catch","finally","handleCommentDelete","commentId","deleteCommentfromPost","current","filter","alert","addCommentFromPost","addedComment","UserSelector","visibleUsers","setSelectedUserId","setPostError","isListOpen","setIsListOpen","textBox","setTextBox","role","user","userId","App","setVisibleUsers","selectedUserId","setCurrentPostsList","postError","isLoading","setIsLoading","useMemo","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.383f832e.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype PostlistProps = {\n  currentPostsList: Post[],\n  setSelectedPostId: (postId: number) => void,\n  selectedPostId: number,\n};\n\nexport const PostsList: React.FC<PostlistProps> = ({\n  currentPostsList,\n  setSelectedPostId,\n  selectedPostId,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {currentPostsList.map((post) => (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    { 'is-link': post.id === selectedPostId },\n                    { 'is-link is-light': post.id !== selectedPostId },\n                  )}\n                  onClick={() => {\n                    if (post.id === selectedPostId) {\n                      setSelectedPostId(0);\n                    } else {\n                      setSelectedPostId(post.id);\n                    }\n                  }}\n                >\n                  {post.id === selectedPostId\n                    ? ('Close')\n                    : ('Open')}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n\nexport const getAllUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPostsfromUser = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getCommentsfromPost = (postId: number) => {\n  return client.get<CommentData[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteCommentfromPost = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addCommentFromPost = (newComment: Comment)\n: Promise<CommentData> => {\n  return client.post('/comments', newComment);\n};\n","import React from 'react';\nimport { CommentData } from '../types/Comment';\n\ntype CommentCardtProps = {\n  comment: CommentData,\n  onDeleteComment: (id: number) => void,\n};\n\nexport const CommentCard: React.FC<CommentCardtProps> = ({\n  comment,\n  onDeleteComment,\n}) => {\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n          {comment.name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => {\n            onDeleteComment(comment.id);\n          }}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {comment.body}\n      </div>\n    </article>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype NewCommentFormProps = {\n  addComment: (newComment: Comment) => void,\n  selectedPost: Post,\n  comments: CommentData[],\n};\n\nexport const NewCommentForm: React.FC<NewCommentFormProps> = ({\n  addComment,\n  selectedPost,\n  comments,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [bodyError, setBodyError] = useState(false);\n\n  const handleReset = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const handleAdd = () => {\n    const newComment = {\n      name,\n      email,\n      body,\n      postId: selectedPost.id,\n      id: (Math.max(...comments.map((element) => element.id)) + 1),\n    };\n\n    if (!name && !email && !body) {\n      setNameError(true);\n      setEmailError(true);\n      setBodyError(true);\n\n      return;\n    }\n\n    if (!name && !email) {\n      setNameError(true);\n      setEmailError(true);\n\n      return;\n    }\n\n    if (!name && !body) {\n      setNameError(true);\n      setBodyError(true);\n\n      return;\n    }\n\n    if (!email && !body) {\n      setEmailError(true);\n      setBodyError(true);\n\n      return;\n    }\n\n    if (!name) {\n      setNameError(true);\n\n      return;\n    }\n\n    if (!body) {\n      setBodyError(true);\n\n      return;\n    }\n\n    if (!email) {\n      setEmailError(true);\n\n      return;\n    }\n\n    addComment(newComment);\n    setBody('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': nameError },\n            )}\n            value={name}\n            onChange={(event) => {\n              setName(event.target.value);\n              setNameError(false);\n            }}\n          />\n          {nameError\n            ? (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )\n            : (\n              <span className=\"icon is-small is-left\">\n                <i className=\"fas fa-user\" />\n              </span>\n\n            )}\n        </div>\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': emailError },\n            )}\n            value={email}\n            onChange={(event) => {\n              setEmail(event.target.value);\n              setEmailError(false);\n            }}\n          />\n          {emailError\n            ? (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )\n            : (\n              <span className=\"icon is-small is-left\">\n                <i className=\"fas fa-envelope\" />\n              </span>\n            )}\n        </div>\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': bodyError },\n            )}\n            value={body}\n            onChange={(event) => {\n              setBody(event.target.value);\n              setBodyError(false);\n            }}\n          />\n        </div>\n        {bodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n            )}\n            onClick={(event) => {\n              event.preventDefault();\n              handleAdd();\n            }}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","/* eslint-disable no-alert */\nimport React, { useEffect, useState } from 'react';\nimport { CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport {\n  addCommentFromPost,\n  deleteCommentfromPost,\n  getCommentsfromPost,\n} from '../utils/fetchClient';\nimport { CommentCard } from './CommentCard';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype PostdetailsProps = {\n  selectedPost: Post\n};\n\nexport const PostDetails: React.FC<PostdetailsProps> = ({\n  selectedPost,\n}) => {\n  const [comments, setComments] = useState<CommentData[]>([]);\n  const [commentsAreLoading, setCommentsAreLoading] = useState(false);\n  const [loadingCommsError, setLoadingCommsError] = useState(false);\n  const [isWriting, setIsWriting] = useState(false);\n\n  useEffect(() => {\n    setCommentsAreLoading(true);\n    getCommentsfromPost(selectedPost.id)\n      .then((data) => {\n        if (data.length > 0) {\n          setComments(data);\n        }\n      })\n      .catch(() => setLoadingCommsError(true))\n      .finally(() => setCommentsAreLoading(false));\n  }, [selectedPost]);\n\n  const handleCommentDelete = (commentId: number) => {\n    deleteCommentfromPost(commentId)\n      .then(() => {\n        setComments((current) => current\n          .filter((comment) => comment.id !== commentId));\n      })\n      .catch(() => (\n        alert('Comment could not be deleted')\n      ));\n  };\n\n  const handleAddComment = (newComment: Comment) => {\n    addCommentFromPost(newComment)\n      .then((addedComment) => {\n        setComments([\n          ...comments,\n          addedComment,\n        ]);\n      })\n      .catch(() => (\n        alert('Comment could not be added')\n      ));\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {selectedPost.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {commentsAreLoading && (\n            <Loader />\n          )}\n          {loadingCommsError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n          {!commentsAreLoading && comments.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n          {!commentsAreLoading && comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map((comment) => (\n                <CommentCard\n                  comment={comment}\n                  onDeleteComment={handleCommentDelete}\n                />\n              ))}\n            </>\n          )}\n\n          {isWriting\n            ? (\n              <NewCommentForm\n                addComment={handleAddComment as () => void}\n                selectedPost={selectedPost}\n                comments={comments}\n              />\n            )\n            : (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => {\n                  setIsWriting(true);\n                }}\n              >\n                Write a comment\n              </button>\n            )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { User } from '../types/User';\n\ntype UserSelectorProps = {\n  visibleUsers: User[],\n  setSelectedUserId: (userId: number) => void,\n  setPostError: (state: boolean) => void,\n  setSelectedPostId: (value: number) => void,\n};\n\nexport const UserSelector: React.FC<UserSelectorProps> = ({\n  visibleUsers,\n  setSelectedUserId,\n  setPostError,\n  setSelectedPostId,\n}) => {\n  const [isListOpen, setIsListOpen] = useState(false);\n  const [textBox, setTextBox] = useState('Choose a user');\n\n  const handleUserOnclick = (userId: number) => {\n    setSelectedUserId(userId);\n    setPostError(false);\n    setIsListOpen(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isListOpen },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          value={textBox}\n          onClick={() => {\n            setIsListOpen((current) => !current);\n          }}\n        >\n          {textBox && (\n            <span>{textBox}</span>\n          )}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {visibleUsers.map((user) => (\n            <a\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n              )}\n              key={user.id}\n              onClick={() => {\n                handleUserOnclick(user.id);\n                setTextBox(user.name);\n                setSelectedPostId(0);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable no-alert */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getAllUsers, getPostsfromUser } from './utils/fetchClient';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [visibleUsers, setVisibleUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [currentPostsList, setCurrentPostsList] = useState<Post[]>([]);\n  const [postError, setPostError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const selectedPost = useMemo(\n    () => {\n      return currentPostsList.find((post) => (\n        post.id === selectedPostId\n      ));\n    }, [selectedPostId],\n  );\n\n  useEffect(() => {\n    getAllUsers()\n      .then((data) => (\n        setVisibleUsers(data)\n      ))\n      .catch(() => (\n        alert('Coult not load the Users')\n      ));\n  }, []);\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (selectedUserId) {\n      getPostsfromUser(selectedUserId)\n        .then((data) => (\n          setCurrentPostsList(data)\n        ))\n        .catch(() => (\n          setPostError(true)\n        ))\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  }, [selectedUserId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  visibleUsers={visibleUsers}\n                  setSelectedUserId={setSelectedUserId}\n                  setPostError={setPostError}\n                  setSelectedPostId={setSelectedPostId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {selectedUserId && isLoading && (\n                  <Loader />\n                )}\n                {selectedUserId && !isLoading && postError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {selectedUserId\n                  && !isLoading && currentPostsList.length === 0 && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n                {selectedUserId\n                  && !isLoading && currentPostsList.length > 0 && (\n                  <PostsList\n                    currentPostsList={currentPostsList}\n                    setSelectedPostId={setSelectedPostId}\n                    selectedPostId={selectedPostId}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPostId },\n            )}\n          >\n            {selectedPost && selectedPostId && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}